---
- hosts: all
  become: true
  tasks:
    - name: Get Public IP
      shell: dig +short myip.opendns.com @resolver1.opendns.com
      register: public_ip

    - name: Get Droplet ID
      command: curl -s http://169.254.169.254/metadata/v1/id
      register: droplet_id

    - name: Create 'developers' group
      group:
        name: developers
        state: present

    - name: Allow 'developers' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%developers"
        line: "%developers ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"

    - name: Add the user 'kubedev'
      ansible.builtin.user:
        name: kubedev
        append: yes
        home: /home/kubedev/
        shell: /bin/bash
        groups: developers

    - name: Add SSH key to 'kubedev'
      authorized_key:
        user: kubedev
        state: present
        key: "{{ lookup('file', pub_key) }}"

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Install additional necessary packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - bash-completion
          - mosquitto-clients
          - nfs-kernel-server

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status

    - name: Add kubedev user to docker group
      user:
        name: kubedev
        group: docker

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Source bash_completion
      become: true
      become_user: kubedev
      shell: source /usr/share/bash-completion/bash_completion
      args:
        executable: /bin/bash

    - name: Add kubectl bash completion
      become: true
      become_user: kubedev
      lineinfile:
        path: /home/kubedev/.bashrc
        line: source <(kubectl completion bash)
        state: present

    - name: Source .bashrc
      become: true
      become_user: kubedev
      shell: source /home/kubedev/.bashrc
      args:
        executable: /bin/bash

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Copy whole setup folder
      become: true
      become_user: kubedev
      copy:
        src: ../setup/
        dest: /tmp/setup/

    - name: Configure kubelet for digitalocean-cloud-controller-manager
      replace:
        path: /tmp/setup/kubernetes/kubeadm-config.yaml
        regexp: "vProviderID"
        replace: "digitalocean://{{ droplet_id.stdout }}"

    - name: Set localAPIEndpoint.advertiseAddress to correct IP
      replace:
        path: /tmp/setup/kubernetes/kubeadm-config.yaml
        regexp: "vAdvertiseAddress"
        replace: "{{ public_ip.stdout }}"

    - name: Set apiServer.CertSANs to correct IP
      replace:
        path: /tmp/setup/kubernetes/kubeadm-config.yaml
        regexp: "vCertSANs"
        replace: "{{ public_ip.stdout }}"

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --config=/tmp/setup/kubernetes/kubeadm-config.yaml

    - name: Setup kubeconfig for kubedev user
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/kubedev/.kube
        - cp -i /etc/kubernetes/admin.conf /home/kubedev/.kube/config
        - chown kubedev:developers -R /home/kubedev/.kube

    - name: Install flannel pod network
      become: true
      become_user: kubedev
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

    - name: Generate join command
      shell: kubeadm token create --print-join-command > /tmp/join-command

    - name: Copy join command to local file
      fetch:
        src: /tmp/join-command
        dest: join-command
        flat: true

    - name: Tainting master nodes
      become: true
      become_user: kubedev
      command: kubectl taint nodes --all node-role.kubernetes.io/master-

    - name: Remove master node label
      become: true
      become_user: kubedev
      command: "{{ item }}"
      with_items:
        # see: https://github.com/digitalocean/digitalocean-cloud-controller-manager/issues/361
        - kubectl label node master-0 node-role.kubernetes.io/master-
        # needs to be removed, else nodes won't get assigned to lb
        - kubectl label node master-0 node.kubernetes.io/exclude-from-external-load-balancers-

    - name: Create csi-digitalocean secret
      become: true
      become_user: kubedev
      shell: kubectl create secret generic digitalocean --from-literal=access-token={{ do_token }} -n kube-system

    - name: Install csi-digitalocean
      become: true
      become_user: kubedev
      shell: "{{ item }}"
      register: csi_digitalocean_result
      retries: 2
      delay: 5
      # retry if newly created CRDs haven't been established yet: https://github.com/digitalocean/csi-digitalocean#2-deploy-the-csi-plugin-and-sidecars
      until: csi_digitalocean_result is not failed
      with_items:
        - kubectl apply -f https://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v2.1.1/crds.yaml
        - kubectl apply -f https://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v2.1.1/driver.yaml
        - kubectl apply -f https://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v2.1.1/snapshot-controller.yaml

    - name: Clone digitalocean-cloud-controller-manager
      become: true
      become_user: kubedev
      ansible.builtin.git:
        repo: "https://github.com/digitalocean/digitalocean-cloud-controller-manager.git"
        dest: /tmp/digitalocean-cloud-controller-manager/

    - name: Create digitalocean-cloud-controller-manager secret
      become: true
      become_user: kubedev
      shell: echo "y" | /tmp/digitalocean-cloud-controller-manager/scripts/generate-secret.sh
      environment:
        DIGITALOCEAN_ACCESS_TOKEN: "{{ do_token }}"

    - name: Deploy digitalocean-cloud-controller-manager
      become: true
      become_user: kubedev
      shell: kubectl apply -f /tmp/digitalocean-cloud-controller-manager/releases/v0.1.32.yml

    - name: Deploy ingress-nginx
      become: true
      become_user: kubedev
      shell: "{{ item }}"
      with_items:
        - kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.46.0/deploy/static/provider/do/deploy.yaml
        - kubectl create ns monitoring

    - name: Wait for loadbalancer to be provisioned
      become: true
      become_user: kubedev
      shell: kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      register: lb_result
      until: lb_result.stdout | length > 0
      # max wait time 5m
      retries: 20
      delay: 15

    - name: Add correct domain to ingress
      replace:
        path: /tmp/setup/kubernetes/ingress.yaml
        regexp: "vDomain"
        replace: "{{ domain }}"

    - name: Deploy Ingress
      become: true
      become_user: kubedev
      shell: kubectl create -f /tmp/setup/kubernetes/ingress.yaml

    - name: Install helm
      shell: "{{ item }}"
      with_items:
        - curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        - chmod 700 /tmp/get_helm.sh
        - /tmp/get_helm.sh

    # unfortunately using community.kubernetes.helm doesn't work correctly ("no token found"), use shell instead
    - name: Add ExternalDNS Repo
      become: true
      become_user: kubedev
      shell: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update helm (not working via update_repo_cache)
      become: true
      become_user: kubedev
      shell: helm repo update

    - name: Deploy ExternalDNS to automatically Manage DNS Records
      become: true
      become_user: kubedev
      shell: helm install external-dns bitnami/external-dns --set provider=digitalocean,digitalocean.apiToken="{{ do_token }}",interval="1m",policy=sync -n kube-system

    - name: Add cert-manager helm repo
      become: true
      become_user: kubedev
      community.kubernetes.helm_repository:
        name: jetstack
        repo_url: "https://charts.jetstack.io"

    - name: Deploy cert-manager
      become: true
      become_user: kubedev
      community.kubernetes.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: v1.3.1
        update_repo_cache: yes
        release_namespace: cert-manager
        create_namespace: true
        wait: yes
        values:
          installCRDs: true

    - name: Set spec.acme.email to correct email address
      replace:
        path: "{{ item }}"
        regexp: "vACMEMailAddress"
        replace: "{{ acme_mail }}"
      with_items:
        - /tmp/setup/kubernetes/issuer-staging.yaml
        - /tmp/setup/kubernetes/issuer-production.yaml

    - name: Wait for cert-manager to be fully provisioned
      become: true
      become_user: kubedev
      shell: kubectl get pods --namespace cert-manager -o json
      register: cert_manager_result
      until: cert_manager_result.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
      # max wait time 2m
      retries: 12
      delay: 10

    - name: Deploy staging issuer
      become: true
      become_user: kubedev
      shell: kubectl create -f /tmp/setup/kubernetes/issuer-staging.yaml

    - name: Add prometheus-community helm repo
      become: true
      become_user: kubedev
      community.kubernetes.helm_repository:
        name: prometheus-community
        repo_url: "https://prometheus-community.github.io/helm-charts"

    - name: Deploy kube-prometheus-stack
      become: true
      become_user: kubedev
      community.kubernetes.helm:
        name: prometheus
        chart_ref: prometheus-community/kube-prometheus-stack
        update_repo_cache: yes
        release_namespace: monitoring
        create_namespace: true
        values:
          prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues: false
          prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues: false

    - name: Deploy prometheus-adapter
      become: true
      become_user: kubedev
      community.kubernetes.helm:
        name: prometheus-adapter
        chart_ref: prometheus-community/prometheus-adapter
        update_repo_cache: yes
        release_namespace: monitoring
        values_files:
          - /tmp/setup/helm/prometheus-adapter-values.yaml

  handlers:
    - name: docker status
      service: name=docker state=started
